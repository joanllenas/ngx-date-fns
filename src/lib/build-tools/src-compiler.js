'use strict';

const path = require('path'),
  spawn = require('child_process').spawn,
  chalk = require('chalk'),
  fs = require('fs'),
  glob = require('glob');

let nextId = 0;

async function compile(src, config) {
  await _compileSrc(config, src);
  await _compileSrc(config);
}

async function _compileSrc(config, src = '') {
  const srcPath = path.join(config.libDir, src);
  const srcTsconfigPath = path.join(config.libDir, config.tsconfigName);

  return new Promise((resolve, reject) => {
      const ngcPath = path.resolve('./node_modules/.bin/ngc');
      const childProcess = spawn(ngcPath, ['-p', srcTsconfigPath], {
        shell: true
      })
      childProcess.stdout.on('data', data => console.log(`${data}`));
      childProcess.stderr.on('data', data => console.error(chalk.red(`${data}`)));

      childProcess.on('exit', exitCode => exitCode === 0 ? resolve() : reject());
    })
    .catch(error => {
      console.error(chalk.red(`Failed to compile ${src}. Error: ${error}`));
      process.exit(1);
    })
    .then(() => {
      renamePrivateReExportsToBeUnique(src, config);
    });
}

/** Renames `ɵa`-style re-exports generated by Angular to be unique across compilation units. */
function renamePrivateReExportsToBeUnique(src, config) {
  // When we compiled the typescript sources with ngc, we do entry-point individually.
  // If the root-level module re-exports multiple of these entry-points, the private-export
  // identifiers (e.g., `ɵa`) generated by ngc will collide. We work around this by suffixing
  // each of these identifiers with an ID specific to this entry point. We make this
  // replacement in the js, d.ts, and metadata output.

  const srcId = nextId++;
  const outputPath = path.join(config.outputDir, src);
  glob.sync(path.join(outputPath, '**/*.+(js|d.ts|metadata.json)')).forEach(filePath => {
    let fileContent = fs.readFileSync(filePath, 'utf-8');
    fileContent = fileContent.replace(/(ɵ[a-z]+)/g, `$1${srcId}`);
    fs.writeFileSync(filePath, fileContent, 'utf-8');
  });
}

module.exports = compile;
module.exports.compile = compile;
